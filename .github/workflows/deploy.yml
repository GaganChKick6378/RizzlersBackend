name: Deploy Rizzlers Backend (Dev)

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: rizzlers-dev
  ECS_CLUSTER: rizzlers-dev-cluster
  ECS_SERVICE: rizzlers-dev-service
  TERRAFORM_DIR: terraform
  TF_VAR_environment: dev
  TF_VAR_vpc_name: KDU-25-VPC
  TF_VAR_availability_zones: '["ap-south-1a", "ap-south-1b", "ap-south-1c"]'
  TF_VAR_use_existing_resources: "true"
  TF_VAR_resource_name_prefix: "rizzlers-tf-dev"

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.terraform-output.outputs.ecr_repository_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform init
      
      - name: Terraform Format
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform fmt
      
      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan -var="environment=dev"
      
      - name: Terraform Apply
        if: github.event_name == 'push'
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve -var="environment=dev"
      
      - name: Terraform Output
        if: github.event_name == 'push'
        id: terraform-output
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
  
  build-and-deploy:
    name: Build and Deploy
    needs: terraform
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and test with Maven
        working-directory: backend
        run: ./mvnw clean package -DskipTests
      
      - name: Build, tag, and push image to Amazon ECR
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
      
      - name: Force new deployment
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
      
      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} 