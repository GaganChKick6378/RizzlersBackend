name: Deploy Rizzlers Backend (Dev)

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

env:
  AWS_REGION: ap-south-1
  TERRAFORM_DIR: terraform
  TF_VAR_environment: dev
  TF_VAR_vpc_name: KDU-25-VPC
  TF_VAR_availability_zones: '["ap-south-1a", "ap-south-1b", "ap-south-1c"]'
  TF_VAR_use_existing_resources: "true"
  TF_VAR_resource_name_prefix: "rizzlers-tf-dev"
  # Subnet IDs from KDU-25-VPC in ap-south-1
  TF_VAR_public_subnet_ids: '["subnet-0b6ce2e699142888b", "subnet-04648c3dd5600df55", "subnet-0600d671cd9103ccc"]'
  TF_VAR_private_subnet_ids: '["subnet-0b31fd91378b4e19c", "subnet-0799d7919a2b9f1e5", "subnet-0185b2ce809770610"]'
  # Hardcoded ECS resource names based on resource_name_prefix pattern
  ECS_CLUSTER: "rizzlers-tf-dev-cluster"
  ECS_SERVICE: "rizzlers-tf-dev-service"

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.extract-url.outputs.repo_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform init
      
      - name: Terraform Format
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform fmt
      
      - name: Find subnet IDs
        if: false  # Disabled - Uncomment to debug subnet discovery
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "Finding subnets in VPC ${{ env.TF_VAR_vpc_name }}..."
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${{ env.TF_VAR_vpc_name }}" --query "Vpcs[0].VpcId" --output text)
          echo "VPC ID: $VPC_ID"
          aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].{SubnetId:SubnetId, AZ:AvailabilityZone, Tags:Tags}" --output json
      
      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan -var="environment=dev"
      
      - name: Terraform Apply
        if: github.event_name == 'push'
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve -var="environment=dev"
      
      - name: Terraform Output to File
        if: github.event_name == 'push'
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform output -raw ecr_repository_url > repo_url.txt
          echo "Repository URL from file: $(cat repo_url.txt)"
      
      - name: Extract Repository URL
        if: github.event_name == 'push'
        id: extract-url
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          # Extract just the repository URL without any debug information
          REPO_URL=$(cat repo_url.txt | grep -o '^[^:]*\.dkr\.ecr\.[^:]*\.amazonaws\.com/[^:]*' || echo "509399625426.dkr.ecr.ap-south-1.amazonaws.com/rizzlers-tf-dev")
          echo "repo_url=${REPO_URL}" >> $GITHUB_OUTPUT
          echo "Clean Repository URL: ${REPO_URL}"
  
  build-and-deploy:
    name: Build and Deploy
    needs: terraform
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and test with Maven
        working-directory: backend
        run: |
          # Try to generate Maven wrapper if necessary
          mvn -N io.takari:maven:wrapper -Dmaven=3.9.5 || true
          
          # Build the project
          mvn clean package -DskipTests
      
      - name: Build, tag, and push image to Amazon ECR
        working-directory: backend
        env:
          ECR_REPOSITORY: ${{ needs.terraform.outputs.ecr_repository_url }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Using ECR Repository: $ECR_REPOSITORY"
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPOSITORY:latest
      
      - name: Force new deployment
        run: |
          echo "Deploying to cluster: ${{ env.ECS_CLUSTER }}, service: ${{ env.ECS_SERVICE }}"
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
      
      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} 